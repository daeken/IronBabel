using System;

using Nextem;
using Nextem.String;

using IronBabel.CPU;
using IronBabel.Device;
using IronBabel.Misc;

namespace IronBabel.Box.Wii {
	public class DSPI {
		protected variant DSPICommand {
		}
		
		protected Queue : MessageQueue [DSPICommand] = MessageQueue();
		protected Box : Wii;
		
		public this(Box : Wii) {
			this.Box = Box;
			Box.AddHWReg(0x0C005000U, 0x0200U, GetDSPI, SetDSPI);
		}
		
		mutable CSR = 0b0000000101010000U;
		mutable DSPMailbox = 0U;
		mutable CPUMailbox = 0U;
		GetDSPI(_CPU : BaseCPU, addr : uint, size : int, PC : uint) : object {
			print "DSPI get {0:X} from {1:X}" <- (addr, PC);
			
			Resize(
				match(addr) {
					| 0x0C005000U =>
						DSPMailbox >> 16
					| 0x0C005002U =>
						DSPMailbox & 0xFFFFU
					
					| 0x0C005004U =>
						CPUMailbox >> 16
					| 0x0C005008U =>
						CPUMailbox & 0xFFFFU
					
					| 0x0C00500AU =>
						CSR
					
					| _ => 0U
				},
				size
			)
		}
		SetDSPI(_CPU : BaseCPU, addr : uint, value : object, size : int, PC : uint) : void {
			def value = Unsize(value, size);
			print "DSPI set {0:X} to {1:X} from {2:X}" <- (addr, value, PC);
			
			match(addr) {
				| 0x0C005000U =>
					DSPMailbox = (DSPMailbox & 0xFFFFU) %| (value << 16);
					HandleIncomingMail(DSPMailbox)
				| 0x0C005002U =>
					DSPMailbox = (DSPMailbox & 0xFFFF0000U) %| value
				
				| 0x0C005028U =>
					CSR |= 1U << 5
				
				| 0x0C00500AU =>
					CSR = {
						if((value & 1U) == 1U)
							0b0000000101010000U
						else
							value
					};
					
					when(CSR == 0x170)
						CPUMailbox = 1U << 31
				
				| _ => ()
			}
		}
		
		HandleIncomingMail(mail : uint) : void {
			| unk =>
				print "Unknown mail to the DSP: {0:X}" <- unk
		}
	}
}
