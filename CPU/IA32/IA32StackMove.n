using System;

using Nextem;
using Nextem.String;

using IronBabel;
using IronBabel.CPU;
using IronBabel.CPU.Expr;
using IronBabel.Macros;
using IronBabel.Macros.IA32;

namespace IronBabel.CPU.IA32 {
	public partial class IA32 : BaseCPU {
		//public DebugPush(value : uint, size : uint, _PC : uint) : void {
		//	print "Pushing {0:X8} ({1} bytes) from {2:X8}" <- (value, size, _PC)
		//}
		
		protected Push(expr : Expr, size : int = 0) : void {
			def size =
				if(size == 0)
					expr.Size;
				else
					size;
			def addr = (
				if(_32)
					Esp
				else
					((Ss :>> uint) << 4) + Sp
			);
			//Emit(Call(CPU.DebugPush(expr, SNum(size), Num(PC))));
			VSp := VSp - (size >> 3);
			(
				match(size) {
					| 8 =>
						Mem8(addr)
					| 16 =>
						Mem16(addr)
					| 32 =>
						Mem32(addr)
					| _ => null
				}
			) := expr
		}
		
		//public DebugPop(value : uint, size : uint, _PC : uint) : void {
		//	print "Popping {0:X8} ({1} bytes) from {2:X8}" <- (value, size, _PC)
		//}
		
		protected Pop(expr : Expr) : void {
			def value = (
				if(_32)
					Mem32(Esp)
				else
					Mem16(((Ss :>> uint) << 4) + Sp)
			);
			expr := value;
			VSp := VSp + (expr.Size >> 3)
		}
		
		protected XChg(left : Expr, right : Expr) : void {
			def size = match(left.Size) {
					| 8 => "byte"
					| 16 => "ushort"
					| 32 => "uint"
					| _ => ""
			}
			Temp(size) := left;
			left := right;
			right := Temp(size)
		}
		
		protected DefineStackMoveOpcodes() : void {
			opcode push(0x06) {
				Push(Es)
			}
			
			opcode pop(0x07) {
				Pop(Es)
			}
			
			opcode push(0x0E) {
				Push(Cs)
			}
			
			opcode push(0x16) {
				Push(Ss)
			}
			
			opcode push(0x1E) {
				Push(Ds)
			}
			
			opcode pop(0x1F) {
				Pop(Ds)
			}
			
			opcode push(0x50) {
				Push(VAx)
			}
			
			opcode push(0x51) {
				Push(VCx)
			}
			
			opcode push(0x52) {
				Push(VDx)
			}
			
			opcode push(0x53) {
				Push(VBx)
			}
			
			opcode push(0x55) {
				Push(VBp)
			}
			
			opcode push(0x56) {
				Push(VSi)
			}
			
			opcode push(0x57) {
				Push(VDi)
			}
			
			opcode pop(0x58) {
				Pop(VAx)
			}
			
			opcode pop(0x59) {
				Pop(VCx)
			}
			
			opcode pop(0x5A) {
				Pop(VDx)
			}
			
			opcode pop(0x5B) {
				Pop(VBx)
			}
			
			opcode pop(0x5D) {
				Pop(VBp)
			}
			
			opcode pop(0x5E) {
				Pop(VSi)
			}
			
			opcode pop(0x5F) {
				Pop(VDi)
			}
			
			opcode pusha(0x60) {
				if(_32)
					()
				else {
					Temp("ushort") := Sp;
					Push(Ax);
					Push(Cx);
					Push(Dx);
					Push(Bx);
					Push(Temp("ushort"));
					Push(Bp);
					Push(Si);
					Push(Di)
				}
			}
			
			opcode popa(0x61) {
				if(_32)
					()
				else {
					Pop(Di);
					Pop(Si);
					Pop(Bp);
					VSp := VSp + 4;
					Pop(Bx);
					Pop(Dx);
					Pop(Cx);
					Pop(Ax)
				}
			}
			
			opcode push(0x68, src=Iz) {
				Push(src, if(_32) 32 else 16)
			}
			
			opcode push(0x6A, src=Ib) {
				Push(src, if(_32) 32 else 16)
			}
			
			opcode xchg(0x86, dest=Eb, src=Gb) {
				XChg(dest, src)
			}
			
			opcode xchg(0x87, dest=Ev, src=Gv) {
				XChg(dest, src)
			}
			
			opcode mov(0x88, dest=Eb, src=Gb) {
				dest := src
			}
			
			opcode mov(0x89, dest=Ev, src=Gv) {
				dest := src
			}
			
			opcode mov(0x8A, dest=Gb, src=Eb) {
				dest := src
			}
			
			opcode mov(0x8B, dest=Gv, src=Ev) {
				dest := src
			}
			
			opcode mov(0x8C, dest=Ev, src=Sw) {
				dest := src
			}
			
			opcode lea(0x8D, dest=Gv, src=Ev) {
				def (_, addr, _) = src :> Memory;
				dest := addr
			}
			
			opcode mov(0x8E, dest=Sw, src=Ev) {
				dest := src;
				
				unless(_32)
					when(dest : object == Cs)
						Branch(PC)
			}
			
			opcode xchg(0x91) {
				XChg(VAx, VCx)
			}
			
			opcode xchg(0x92) {
				XChg(VAx, VDx)
			}
			
			opcode xchg(0x93) {
				XChg(VAx, VBx)
			}
			
			opcode xchg(0x96) {
				XChg(VSi, VAx)
			}
			
			opcode cbw(0x98) {
				if(_32)
					Emit(
						If(
							(Ax & 0x8000U) != 0U,
							Eval(
								quoteblock {
									Eax := Num(0xFFFF0000U) | (Ax :>> uint)
								}
							),
							Eval(
								quoteblock {
									Eax := Ax :>> uint
								}
							)
						)
					)
				else
					Emit(
						If(
							(Al & 0x80U) != 0U,
							Eval(
								quoteblock {
									Ax := Num(0xFF00U) | (Al :>> ushort)
								}
							),
							Eval(
								quoteblock {
									Ax := Al :>> ushort
								}
							)
						)
					)
			}
			
			opcode cdwq(0x99) {
				if(_32)
					Emit(
						If(
							(Eax & 0x80000000U) != 0U,
							Eval(
								quoteblock {
									Edx := 0xFFFFFFFFU
								}
							),
							Eval(
								quoteblock {
									Edx := 0x0U
								}
							)
						)
					)
				else
					Emit(
						If(
							(Ax & 0x8000) != 0U,
							Eval(
								quoteblock {
									Dx := 0xFFFFU
								}
							),
							Eval(
								quoteblock {
									Dx := 0x0U
								}
							)
						)
					)
			}
			
			opcode pushf(0x9C) {
				Push(VFlags)
			}
			
			opcode popf(0x9D) {
				Pop(VFlags)
			}
			
			opcode mov(0xA0, src=Ob) {
				Al := src
			}
			
			opcode mov(0xA1, src=Ov) {
				VAx := src
			}
			
			opcode mov(0xA2, dest=Ob) {
				dest := Al
			}
			
			opcode mov(0xA3, dest=Ov) {
				dest := VAx
			}
			
			opcode movs(0xA4) {
				RepCx(
					quoteblock {
						Mem8(
							if(_32)
								Edi
							else
								((Es :>> uint) << 4) + Di
						) := Mem8(
							if(_32)
								Esi
							else
								((Ds :>> uint) << 4) + Si
						);
						VDi := VDi + 1;
						VSi := VSi + 1
					}
				)
			}
			
			opcode movs(0xA5) {
				RepCx(
					quoteblock {
						def dest = 
							if(_32)
								Mem32(Edi)
							else
								Mem16(((Es :>> uint) << 4) + Di);
						def src = 
							if(_32)
								Mem32(Esi)
							else
								Mem16(((Ds :>> uint) << 4) + Si);
						dest := src;
						VDi := VDi + if(_32) 4 else 2;
						VSi := VSi + if(_32) 4 else 2
					}
				)
			}
			
			opcode stos(0xAA) {
				RepCx(
					quoteblock {
						Mem8(
							if(_32)
								Edi
							else
								((Es :>> uint) << 4) + Di
						) := Al;
						VDi := VDi + 1;
					}
				)
			}
			
			opcode stos(0xAB) {
				RepCx(
					quoteblock {
						Mem16(
							if(_32)
								Edi
							else
								((Es :>> uint) << 4) + Di
						) := Ax;
						VDi := VDi + 2;
					}
				)
			}
			
			opcode lods(0xAC) {
				Al := Mem8(
					if(_32)
						Esi
					else
						((Ds :>> uint) << 4) + Si
				);
				VSi := VSi + 1
			}
			
			opcode lods(0xAD) {
				Al := Mem16(
					if(_32)
						Esi
					else
						((Ds :>> uint) << 4) + Si
				);
				VSi := VSi + 2
			}
			
			opcode mov(0xB0, src=Ib) {
				Al := src
			}
			
			opcode mov(0xB1, src=Ib) {
				Cl := src
			}
			
			opcode mov(0xB2, src=Ib) {
				Dl := src
			}
			
			opcode mov(0xB3, src=Ib) {
				Bl := src
			}
			
			opcode mov(0xB4, src=Ib) {
				Ah := src
			}
			
			opcode mov(0xB6, src=Ib) {
				Dh := src
			}
			
			opcode mov(0xB8, src=Iv) {
				VAx := src
			}
			
			opcode mov(0xB9, src=Iv) {
				VCx := src
			}
			
			opcode mov(0xBA, src=Iv) {
				VDx := src
			}
			
			opcode mov(0xBB, src=Iv) {
				VBx := src
			}
			
			opcode mov(0xBC, src=Iv) {
				VSp := src
			}
			
			opcode mov(0xBD, src=Iv) {
				VBp := src
			}
			
			opcode mov(0xBE, src=Iv) {
				VSi := src
			}
			
			opcode mov(0xBF, src=Iv) {
				VDi := src
			}
			
			opcode les(0xC4, dest=Gv, src=Ev) {
				def (_, src, _) = src :> Memory;
				Temp("uint") := src;
				dest := Mem16(Temp("uint"));
				Es   := Mem16(Temp("uint") + Num(2))
			}
			
			opcode lds(0xC5, dest=Gv, src=Ev) {
				def (_, src, _) = src :> Memory;
				Temp("uint") := src;
				dest := Mem16(Temp("uint"));
				Ds   := Mem16(Temp("uint") + Num(2))
			}
		}
	}
}
