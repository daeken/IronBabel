using IronBabel.CPU.IA32.Test.Macros;

namespace IronBabel.CPU.IA32.Test {
	public partial class Arith16 {
		test and_EbGb() : void {
			setup {
				32 = false;
				al = 3U :> byte;
				bl = 5U :> byte
			}
			code(bits=16) {
				_and[0x20, Eb, Gb](al, bl)
			}
			expects al == 1U
		}
		test and_EvGv() : void {
			setup {
				32 = false;
				eax = 3U;
				ebx = 5U
			}
			code(bits=16) {
				_and[0x21, Ev, Gv](eax, ebx)
			}
			expects eax == 1U
		}
		test and_GbEb() : void {
			setup {
				32 = false;
				al = 3U :> byte;
				bl = 5U :> byte
			}
			code(bits=16) {
				_and[0x22, Gb, Eb](al, bl)
			}
			expects al == 1U
		}
		test and_GvEv() : void {
			setup {
				32 = false;
				eax = 3U;
				ebx = 5U
			}
			code(bits=16) {
				_and[0x23, Gv, Ev](eax, ebx)
			}
			expects eax == 1U
		}
		test and_AL_Ib() : void {
			setup {
				32 = false;
				al = 3U :> byte
			}
			code(bits=16) {
				_and[0x24, Ib](5U)
			}
			expects eax == 1U
		}
		test and_rAX_Iz() : void {
			setup {
				32 = false;
				eax = 3U
			}
			code(bits=16) {
				_and[0x25, Iz](5U)
			}
			expects eax == 1U
		}
	}
}
